// Copyright (c) 2025 Contributors to the Eclipse Foundation
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

== Introduction

:Jakarta-Persistence: https://jakarta.ee/specifications/persistence/
:Jakarta-Data: https://jakarta.ee/specifications/data/
:Jakarta-NoSQL: https://jakarta.ee/specifications/nosql/

Jakarta Query defines an object-oriented query language designed for use with
link:{Jakarta-Persistence}[Jakarta Persistence], link:{Jakarta-Data}[Jakarta Data],
 link:{Jakarta-NoSQL}[Jakarta NoSQL], and with any other similar persistence technology in any object-oriented programming language.
Jakarta Query specifies:

- a core language which can be implemented by Jakarta Data and Jakarta NoSQL
providers, and
- an extended language tailored for Jakarta Persistence providers or other
persistence technologies backed by relational databases.

The language is closely based on the existing query languages defined by
Jakarta Persistence and Jakarta Data, and is backward compatible with both.

Jakarta Query prioritizes clients written in Java. However, it is not by
nature limited to Java, and implementations in other sufficiently Java-like
programming languages are encouraged.

=== Object-oriented query languages

A data structure in an object-oriented language is a graph of objects
interconnected by unidirectional object references, which may be polymorphic.
Some non-relational databases support similar representations. On the other
hand, relational databases represent relationships between entities using
foreign keys, and therefore SQL has no syntactic construct representing
navigation of an association. Similarly, inheritance and polymorphism can be
easily represented within the relational model, but are not present as
first-class constructs in the SQL language. An object-oriented query language
is a dialect of SQL with support for associations and subtype polymorphism.

An object-oriented query language is in many ways very similar to a graph-based
query language like, for example, SPARQL, but differs from such query languages
by assuming a typed representation of the data native to the object-oriented
programming language.

=== Historical background

:JPQL: https://jakarta.ee/specifications/persistence/3.2/jakarta-persistence-spec-3.2#a4665
:JDQL: https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0#_jakarta_data_query_language
:JSR-220: https://jcp.org/en/jsr/detail?id=220

Object-oriented dialects of SQL have existed since at least the early 1990s.
The Object Query Language (OQL) was an early example, targeting object
databases, but was never widely used, since object databases were themselves
not widely adopted. Hibernate Query Language (HQL) and the Enterprise JavaBeans
Query Language (EJB-QL) were both introduced in 2001 as query languages
intended for use with object/relational mapping. HQL was widely adopted by the
Java community and was eventually standardized as the
link:{JPQL}[Java Persistence Query Language] (JPQL) by link:{JSR-220}[JSR-220]
in 2006. JPQL has been implemented by at least five different products and is
in extremely wide use today. On the other hand, since JPQL is defined as part
of the Jakarta Persistence specification, it has not been reused outside the
context of object/relational mapping in Java. In 2024, Jakarta Data 1.0
introduced the link:{JDQL}[Jakarta Data Query Language] (JDQL), a strict subset
of JPQL intended for use with non-relational databases.

It is now inconvenient that JDQL and JPQL are maintained separately by different
groups, and so the Jakarta Query project has taken on responsibility for their
evolution.

=== Goals

This specification defines an object-oriented query language with two well-defined levels of compliance:

- the _extended language_, which is known to be implementable by persistence solutions backed by SQL databases, and
- the _core language_, a strict subset which is designed to be implementable on other kinds of non-SQL data stores.

The extended language is designed for reuse by Jakarta Persistence.
The core language is designed for reuse by Jakarta Data and Jakarta NoSQL.
Jakarta Query itself has no dependence on either of these specifications, and reuse in other contexts is encouraged.

This document:

- standardizes the syntax and semantics of the language,
- delineates the core subset,
- provides guidelines on how query language constructs map to language elements in a program written in Java.

The definition of the query language itself is independent of the Java programming language, and of any details of the underlying datastore and data access technology.

=== Non-Goals

This specification does not specify Java APIs for:

- executing queries,
- embedding queries in Java programs,
- constructing queries programmatically, nor
- defining entity classes which are used in queries.

Jakarta Persistence and Jakarta Data define diverse ways in which queries may be embedded and executed in Java, using the `EntityManager` or a `@Repository` interface, respectively.

Furthermore, the semantics defined by Jakarta Query may be reused by reference in other specifications, for example, in the definition of the Jakarta Persistence Criteria API, or in the definition of the Jakarta Data Restrictions.

This document does not define how constructs in Jakarta Query map to constructs in SQL or in any other datastore-specific query languages.
Jakarta Persistence defines an interpretation compatible with SQL.

=== Conventions

_Italics_ are used to highlight a word or phrase which is being defined by the text in which it occurs.

*Bold* text is occasionally used to draw attention to important words or phrases.

`Monospace` font indicates a keyword or fragment of text from the query language itself, or from the grammar for the language.
When a keyword or name of a grammar rule is not part of the core language, the keyword or rule name is `#highlighted#`.

ANTLR 4-style BNF is used to define the syntax of the language in <<syntax>>.

An informal but readable BNF-like metalanguage is used to illustrate the syntax of some basic language elements in <<algebra>>.
Here, repetition is indicated by a comma-separated list terminated with en ellipsis, and production by a label enclosed in brackets; all other tokens are interpreted literally.
Code fragments written in this metalanguage are never prescriptive.

Admonitions are used to set apart:

- explanatory text which is not prescriptive or not part of the definition of the language, and
- information relating to compatibility between implementations of Jakarta Query, and to differences between the core language and the extended language.

include::project_team.adoc[]

